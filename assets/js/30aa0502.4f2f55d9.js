"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[5675],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),p=i,h=d["".concat(s,".").concat(p)]||d[p]||m[p]||a;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4947:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={id:"server-client",sidebar_position:3},o="Run client -> server workloads : Redis",l={unversionedId:"guides/server-client/server-client",id:"guides/server-client/server-client",title:"Run client -> server workloads : Redis",description:"In this document, we are going to run a quick round of Redis workload, where server and client are on different systems.",source:"@site/docs/guides/3-server-client/3-server-client.md",sourceDirName:"guides/3-server-client",slug:"/guides/server-client/",permalink:"/VirtualClient/docs/guides/server-client/",draft:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/guides/3-server-client/3-server-client.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"server-client",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Run monitors while benchmarking",permalink:"/VirtualClient/docs/guides/run-monitors"},next:{title:"Environment Layouts Json",permalink:"/VirtualClient/docs/guides/server-client/environment-layout"}},s={},c=[{value:"Environment Setup",id:"environment-setup",level:2},{value:"Run Redis Benchmark",id:"run-redis-benchmark",level:2},{value:"Read results and logs",id:"read-results-and-logs",level:2},{value:"Congratulations !!",id:"congratulations-",level:2}],u={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"run-client---server-workloads--redis"},"Run client -> server workloads : Redis"),(0,i.kt)("p",null,"In this document, we are going to run a quick round of Redis workload, where server and client are on different systems."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Redis is a Linux only workload.")),(0,i.kt)("h2",{id:"environment-setup"},"Environment Setup"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You need two systems that are in the same subnet/internet and able to see each other. "),(0,i.kt)("li",{parentName:"ol"},"You need an ",(0,i.kt)("a",{parentName:"li",href:"/VirtualClient/docs/guides/server-client/environment-layout"},(0,i.kt)("strong",{parentName:"a"},"EnvironmentLayout Json"))," file in both systems. This file has three information: ",(0,i.kt)("inlineCode",{parentName:"li"},"clientId"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ipAdress")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"role"),"."),(0,i.kt)("li",{parentName:"ol"},"In this example, client runs on ",(0,i.kt)("inlineCode",{parentName:"li"},"10.1.0.1"),", server runs on ",(0,i.kt)("inlineCode",{parentName:"li"},"10.1.0.2"),". The layout looks like this.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "clients": [\n        {\n            "name": "TestClient",\n            "role": "Client",\n            "privateIPAddress": "10.1.0.1"\n        },\n        {\n            "name": "TestServer",\n            "role": "Server",\n            "privateIPAddress": "10.1.0.2"\n        }\n    ]\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Wonder why not just use a ",(0,i.kt)("em",{parentName:"p"},"--serverIpAddress")," like other tools? Great question.",(0,i.kt)("br",null),"\nAn environment json will give every client downledge about their role and other clients' roles. This enables VC to do complex multi-role workloads, like NGINX with server, client and reverse proxy.")),(0,i.kt)("h2",{id:"run-redis-benchmark"},"Run Redis Benchmark"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"In this profile, VC will download Redis and install Redis server.",(0,i.kt)("br",null),"\nIf prefered, run in a Virtual Machine to avoid those changes to your system.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Run this command on client",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ./VirtualClient --clientId=TestClient --profile=GET-STARTED-REDIS.json --profile=MONITORS-NONE.json --iterations=1 --packages=https://virtualclient.blob.core.windows.net/packages --layoutPath=layout.json\n"))),(0,i.kt)("li",{parentName:"ul"},"Run this command on server",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ./VirtualClient --clientId=TestServer --profile=GET-STARTED-REDIS.json --profile=MONITORS-NONE.json --iterations=1 --packages=https://virtualclient.blob.core.windows.net/packages --layoutPath=layout.json\n"))),(0,i.kt)("li",{parentName:"ul"},"Notice the two commands are exactly the same except the ",(0,i.kt)("inlineCode",{parentName:"li"},"--clientId"),". The clientId is default to the machine name. You don't need to pass in ",(0,i.kt)("inlineCode",{parentName:"li"},"clientId")," if the ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," in layout.json matches your actual machine name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--layoutPath")," should point to the layout json file you just created. Relative and absolute paths are both supported."),(0,i.kt)("li",{parentName:"ul"},"The two VC will install Redis on server, Memtier on client, handshake, and then start the benchmarking."),(0,i.kt)("li",{parentName:"ul"},"The benchmark might run for about 10 minutes, get a cup of \u2615.")),(0,i.kt)("h2",{id:"read-results-and-logs"},"Read results and logs"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similar to the previous tutorial, the metric is in file ",(0,i.kt)("inlineCode",{parentName:"p"},"logs/metrics-20221116.log"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"VC captures quite a lot of metrics for Redis: ",(0,i.kt)("a",{parentName:"p",href:"/VirtualClient/docs/workloads/redis/redis-metrics"},"Full Redis Metrics"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Two most critical metrics for Redis are throughput and P99 latency")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Throughput"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{16-19}","{16-19}":!0},'{\n    "timestamp": "2022-11-16T05:35:55.2321711+00:00",\n    "level": "Information",\n    "message": "RedisMemtier.ScenarioResult",\n    "agentId": "testclient",\n    "appVersion": "1.6.0.0",\n    "clientId": "testclient",\n    "executionProfileName": "GET-STARTED-REDIS.json",\n    "executionProfilePath": "/home/azureuser/virtualclient/profiles/GET-STARTED-REDIS.json",\n    "executionSystem": null,\n    "experimentId": "5c6d967f-7c84-4d74-9099-65b6f629d61e",\n    "metadata": {"experimentId":"5c6d967f-7c84-4d74-9099-65b6f629d61e","agentId":"TestClient"},\n    "metricCategorization": "",\n    "metricDescription": "",\n    "metricMetadata": {},\n    "metricName": "Throughput",\n    "metricRelativity": "HigherIsBetter",\n    "metricUnit": "req/sec",\n    "metricValue": 3551162.35,\n    "parameters": {"scenario":"Memtier_4t_1c","role":"Client","port":"6379","packageName":"Redis","numberOfThreads":"4","numberOfClients":"1","numberOfRuns":"1","durationInSecs":"60","pipelineDepth":"32","bind":"1","profileIteration":1,"profileIterationStartTime":"2022-11-16T05:30:34.5264899Z"},\n    "platformArchitecture": "linux-x64",\n    "scenarioEndTime": "2022-11-16T05:35:55.2210932+00:00",\n    "scenarioName": "Memtier_4t_1c",\n    "scenarioStartTime": "2022-11-16T05:31:55.1121065+00:00",\n    "systemInfo": ...,\n    "toolName": "RedisMemtier",\n    "etc": ...\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"P99 latency"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{16-19}","{16-19}":!0},'{\n    "timestamp": "2022-11-16T05:35:55.2326483+00:00",\n    "level": "Information",\n    "message": "RedisMemtier.ScenarioResult",\n    "agentId": "testclient",\n    "appVersion": "1.6.0.0",\n    "clientId": "testclient",\n    "executionProfileName": "GET-STARTED-REDIS.json",\n    "executionProfilePath": "/home/azureuser/virtualclient/profiles/GET-STARTED-REDIS.json",\n    "executionSystem": null,\n    "experimentId": "5c6d967f-7c84-4d74-9099-65b6f629d61e",\n    "metadata": {"experimentId":"5c6d967f-7c84-4d74-9099-65b6f629d61e","agentId":"TestClient"},\n    "metricCategorization": "",\n    "metricDescription": "",\n    "metricMetadata": {},\n    "metricName": "P99lat",\n    "metricRelativity": "LowerIsBetter",\n    "metricUnit": "msec",\n    "metricValue": 0.255,\n    "parameters": {"scenario":"Memtier_4t_1c","role":"Client","port":"6379","packageName":"Redis","numberOfThreads":"4","numberOfClients":"1","numberOfRuns":"1","durationInSecs":"60","pipelineDepth":"32","bind":"1","profileIteration":1,"profileIterationStartTime":"2022-11-16T05:30:34.5264899Z"},\n    "platformArchitecture": "linux-x64",\n    "scenarioEndTime": "2022-11-16T05:35:55.2210932+00:00",\n    "scenarioName": "Memtier_4t_1c",\n    "scenarioStartTime": "2022-11-16T05:31:55.1121065+00:00",\n    "systemInfo": ...,\n    "toolName": "RedisMemtier",\n    "etc": ...\n}\n')))),(0,i.kt)("h2",{id:"congratulations-"},"Congratulations !!"),(0,i.kt)("p",null,"You just ran a multi-role workload and benchmark your system with Redis."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The profile ",(0,i.kt)("inlineCode",{parentName:"li"},"GET-STARTED-REDIS")," is a highly stripped down version Redis, with just 1 client and 4 threads."),(0,i.kt)("li",{parentName:"ul"},"The regular ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/microsoft/VirtualClient/blob/main/src/VirtualClient/VirtualClient.Main/profiles/PERF-REDIS.json"},(0,i.kt)("inlineCode",{parentName:"a"},"PERF-REDIS.json"))," has a diverse combinations of Redis benchmark. We recommend run the full profile to benchmark Redis performance holistically. The full profile might take couple hours.")))}m.isMDXComponent=!0}}]);