"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[9343],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4584:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const o={},a="lspci",l={unversionedId:"monitors/0400-lspci",id:"monitors/0400-lspci",title:"lspci",description:"The PCI Utilities package contains a library for portable access to PCI bus",source:"@site/docs/monitors/0400-lspci.md",sourceDirName:"monitors",slug:"/monitors/0400-lspci",permalink:"/VirtualClient/docs/monitors/0400-lspci",draft:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/monitors/0400-lspci.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"nvidia-smi",permalink:"/VirtualClient/docs/monitors/0300-nvidia-smi"},next:{title:"Dependencies",permalink:"/VirtualClient/docs/category/dependencies"}},s={},c=[{value:"Dependency",id:"dependency",level:2},{value:"Supported Platforms",id:"supported-platforms",level:2},{value:"lspci Output Description",id:"lspci-output-description",level:2},{value:"Example",id:"example",level:3}],p={toc:c};function u(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lspci"},"lspci"),(0,i.kt)("p",null,"The PCI Utilities package contains a library for portable access to PCI bus\nconfiguration registers and several utilities based on this library."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"lspci: displays detailed information about all PCI buses and devices.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/pciutils/pciutils"},"lspci repo")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://eternallybored.org/misc/pciutils/"},"Windows Build Download"))),(0,i.kt)("h2",{id:"dependency"},"Dependency"),(0,i.kt)("p",null,"Most Linux distro comes with lspci pre-installed. On Windows, VC is packaging a win-x64 build inside VC package itself."),(0,i.kt)("h2",{id:"supported-platforms"},"Supported Platforms"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"linux-x64"),(0,i.kt)("li",{parentName:"ul"},"linux-arm64"),(0,i.kt)("li",{parentName:"ul"},"win-x64")),(0,i.kt)("h2",{id:"lspci-output-description"},"lspci Output Description"),(0,i.kt)("p",null,"The following section describes the various counters/metrics that are available with the lspci toolset."),(0,i.kt)("p",null,"The command we are using is ",(0,i.kt)("inlineCode",{parentName:"p"},"lspci -vvv"),". The data structure of the lspci output is not a straightforward dicctionary.\nThe data structure is parsed according to the contract at ",(0,i.kt)("a",{target:"_blank",href:r(4727).Z},"PciDevice.cs"),"."),(0,i.kt)("p",null,"For each PCI device, we are parsing the name, address, various properties and capabilities."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"This is an example of the minimum profile to run LspciMonitor. The PCI devices is not expected to change often, so the monitor frequency could be set very low."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "Description": "Default Monitors",\n    "Parameters": {\n      "MonitorFrequency": "12:00:00",\n      "MonitorWarmupPeriod": "00:01:00"\n    },\n    "Monitors": [\n      {\n        "Type": "LspciMonitor",\n        "Parameters": {\n          "Scenario": "CapturePCIDevicesDetails",\n          "MonitorFrequency": "$.Parameters.MonitorFrequency",\n          "MonitorWarmupPeriod": "$.Parameters.MonitorWarmupPeriod"\n        }\n      }\n    ]\n  }\n')))}u.isMDXComponent=!0},4727:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/files/PciDevice-28b998461800228f096c80fc2fb2d794.cs"}}]);