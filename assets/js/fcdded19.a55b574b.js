"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[2056],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"openssl",sidebar_position:1},l="OpenSSL Workload",s={unversionedId:"workloads/openssl/openssl",id:"workloads/openssl/openssl",title:"OpenSSL Workload",description:"OpenSSL 3.0 is an open-source industry standard transport layer security (TLS, SSL) toolset. The OpenSSL toolset includes a feature/command (openssl speed) that enables measuring",source:"@site/docs/workloads/openssl/openssl-1.md",sourceDirName:"workloads/openssl",slug:"/workloads/openssl/openssl",permalink:"/VirtualClient/docs/workloads/openssl/openssl",draft:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/workloads/openssl/openssl-1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"openssl",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"OpenFOAM",permalink:"/VirtualClient/docs/workloads/openfoam/openfoam-1"},next:{title:"OpenSSL Workload Metrics",permalink:"/VirtualClient/docs/workloads/openssl/openssl-metrics"}},i={},p=[{value:"What is Being Tested?",id:"what-is-being-tested",level:3},{value:"Supported Platforms",id:"supported-platforms",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"openssl-workload"},"OpenSSL Workload"),(0,a.kt)("p",null,"OpenSSL 3.0 is an open-source industry standard transport layer security (TLS, SSL) toolset. The OpenSSL toolset includes a feature/command (openssl speed) that enables measuring\nthe performance of the CPU in processing operations associated with various cryptography/encryption algorithms supported by the toolset (e.g. md5, sha1, sha256, aes-256-cbc)."),(0,a.kt)("p",null,"This toolset was compiled directly from the open source GitHub repo in order to take advantage of 3.0 beta features sets and expanded support for additional\ncryptography algorithms/operations."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/openssl/openssl"},"OpenSSL GitHub")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.openssl.org/"},"OpenSSL Documentation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.openssl.org/docs/manmaster/"},"OpenSSL Manual Pages")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.openssl.org/docs/manmaster/man1/openssl-speed.html"},"OpenSSL speed"))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"what-is-being-tested"},"What is Being Tested?"),(0,a.kt)("p",null,"OpenSSL 3.0 is designed to be a very simple benchmarking tool. It produces a set of measurements each testing the performance of the CPU for handling a particular cryptography\nalgorithm across a set of buffer sizes (e.g. 16-byte, 64-byte, 256-byte, 1024-byte, 8192-byte and 16384-byte)."),(0,a.kt)("p",null,"The OpenSSL 3.0 build used by the VC Team can run the following CPU-intensive cryptography algorithm tests:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"md5"),(0,a.kt)("li",{parentName:"ul"},"sha1"),(0,a.kt)("li",{parentName:"ul"},"sha256"),(0,a.kt)("li",{parentName:"ul"},"sha512"),(0,a.kt)("li",{parentName:"ul"},"hmac(md5)"),(0,a.kt)("li",{parentName:"ul"},"des-ede3"),(0,a.kt)("li",{parentName:"ul"},"aes-128-cbc"),(0,a.kt)("li",{parentName:"ul"},"aes-192-cbc"),(0,a.kt)("li",{parentName:"ul"},"aes-256-cbc"),(0,a.kt)("li",{parentName:"ul"},"camellia-128-cbc"),(0,a.kt)("li",{parentName:"ul"},"camellia-192-cbc"),(0,a.kt)("li",{parentName:"ul"},"camellia-256-cbc"),(0,a.kt)("li",{parentName:"ul"},"ghash")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"supported-platforms"},"Supported Platforms"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Linux x64"),(0,a.kt)("li",{parentName:"ul"},"Linux arm64"),(0,a.kt)("li",{parentName:"ul"},"Windows x64",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Note that multi-threaded/parallel tests are not supported for Windows builds of OpenSSL 3.0. This means that the OpenSSL speed command\nwill not heavily exercise the CPU resources on the system. It will use a single core/vCPU to run each test. With Linux builds, the\ntoolset can be configured to use ALL cores/vCPUs available on the system in-parallel.")))))}c.isMDXComponent=!0}}]);