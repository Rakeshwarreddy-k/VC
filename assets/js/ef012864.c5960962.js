"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[978],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,g=c["".concat(l,".").concat(d)]||c[d]||u[d]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6686:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={id:"telemetry"},o="Data / Telemetry Integration",s={unversionedId:"guides/telemetry/telemetry",id:"guides/telemetry/telemetry",title:"Data / Telemetry Integration",description:"Eventhub integration",source:"@site/docs/guides/telemetry/telemetry.md",sourceDirName:"guides/telemetry",slug:"/guides/telemetry/",permalink:"/VirtualClient/docs/guides/telemetry/",draft:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/guides/telemetry/telemetry.md",tags:[],version:"current",frontMatter:{id:"telemetry"},sidebar:"tutorialSidebar",previous:{title:"Large scale A/B testing",permalink:"/VirtualClient/docs/guides/usage-scenarios/large-scale"},next:{title:"Workloads",permalink:"/VirtualClient/docs/category/workloads"}},l={},m=[{value:"Eventhub integration",id:"eventhub-integration",level:2},{value:"Event Hub Namespace Setup",id:"event-hub-namespace-setup",level:3},{value:"Categories of Data",id:"categories-of-data",level:4},{value:"Create Event Hub Namespace",id:"create-event-hub-namespace",level:4},{value:"Create Event Hubs",id:"create-event-hubs",level:4},{value:"Integration with Azure Data Explorer/Kusto",id:"integration-with-azure-data-explorerkusto",level:3},{value:"Create Databases and Tables",id:"create-databases-and-tables",level:4},{value:"Create Custom Functions",id:"create-custom-functions",level:4},{value:"Create the JSON Ingestion Mappings",id:"create-the-json-ingestion-mappings",level:4},{value:"Create Data Connectors",id:"create-data-connectors",level:4},{value:"Configure ADX Cluster Ingestion Settings",id:"configure-adx-cluster-ingestion-settings",level:4}],p={toc:m};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data--telemetry-integration"},"Data / Telemetry Integration"),(0,r.kt)("h2",{id:"eventhub-integration"},"Eventhub integration"),(0,r.kt)("p",null,"The Virtual Client emits a wide-range of different types of data/telemetry as part of the execution of workload and monitoring\nprofiles. This data/telemetry might for example include measurements/metrics emitted by a particular workload, performance counters\nor just common tracing/logging output. This data is useful for using the Virtual Client as a platform for evaluating performance\nof a system while under test. In order to surface this data, the Virtual Client supports the ability to upload this data to\nan Event Hub namespace. Event Hub is a highly scalable Azure cloud-based messaging hub/proxy that has out-of-the-box integration with\na number of other Azure data/data pipeline resources (e.g. Azure Data Explorer/Kusto). "),(0,r.kt)("p",null,"Virtual Client allows the user to supply a connection string to an Event Hub namespace on the command line. The remainder of this document\ncovers the requirements for using an Event Hub including the setup."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://azure.microsoft.com/en-us/services/event-hubs/?OCID=AID2200277_SEM_e21e0a74b99318c95ac66be89b11ec19:G:s&ef_id=e21e0a74b99318c95ac66be89b11ec19:G:s&msclkid=e21e0a74b99318c95ac66be89b11ec19"},"Event Hub Documentation"))),(0,r.kt)("h3",{id:"event-hub-namespace-setup"},"Event Hub Namespace Setup"),(0,r.kt)("p",null,"The following section covers the requirements for setting up an Event Hub namespace to use in conjunction with the Virtual Client. To begin with,\nit is important to understand how the Virtual Client emits data/telemetry. "),(0,r.kt)("h4",{id:"categories-of-data"},"Categories of Data"),(0,r.kt)("p",null,"Telemetry data emitted is divided into 5 different categories:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Logs/Traces"),(0,r.kt)("br",{parentName:"p"}),"\n","The Virtual Client is heavily instrumented with structured logging/tracing logic. This ensures that the inner workings of the application can\nare easily visible to the user. This is particularly important for debugging scenarios. Errors experienced by the application are captured here\nas well and will contain detailed error + callstack information."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Workload Metrics"),(0,r.kt)("br",{parentName:"p"}),"\n","Workload metrics are measurements and information captured from the output of a particular workload (e.g. DiskSpd, FIO, GeekBench) that represent\nperformance data from the system under test."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"System Performance Counters"),(0,r.kt)("br",{parentName:"p"}),"\n","Performance counters provide measurements from the system as-a-whole and are useful for determining exactly how the resources (e.g. CPU, memory, I/O, network)\nwere used during the execution of a workload."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"System Events"),(0,r.kt)("br",{parentName:"p"}),"\n","System events describe certain types of important information on the system beyond simple performance measurements. This might for example\ninclude Windows registry changes or special event logs."))),(0,r.kt)("h4",{id:"create-event-hub-namespace"},"Create Event Hub Namespace"),(0,r.kt)("p",null,"The Virtual Client emits data for each one of these categories into a distinct/singular target Event Hub within an Event Hub namespace (a 1-to-1 mapping).\nIn order to use Event Hub with the Virtual Client, an Event Hub namespace must be setup. The following recommendations relate to the Event Hub namespace itself."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Throughput Units"),(0,r.kt)("br",{parentName:"li"}),"Throughput units control the capacity for each individual Event Hub created in the namespace. It is recommended that you set this\nto at least 20 for production scenarios. For non-production scale scenarios, this can be set to between 5 and 10. Fortunately, this\nsetting can be changed at any point to enable the Event Hubs in the namespace to handle additional message volume.")),(0,r.kt)("h4",{id:"create-event-hubs"},"Create Event Hubs"),(0,r.kt)("p",null,"The Event Hub namespace will need 4 Event Hubs to be created. The following steps describe requirements and recommendations. These are general recommendations\nbased upon the VC team's experience that are designed to support high volumes of telemetry (e.g. hundreds of millions of events per day per hub)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"telemetry-events"),(0,r.kt)("br",{parentName:"p"}),"\n","Create an Event Hub named 'telemetry-events' to intake system events data emitted by the Virtual Client. The following specifications should be used when creating\nthis Event Hub."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Message Retention: 2 days"),(0,r.kt)("li",{parentName:"ul"},"Partition Count: Production Scale = 32, Non-Production/Test Scale = 10"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"telemetry-logs"),(0,r.kt)("br",{parentName:"p"}),"\n","Create an Event Hub named 'telemetry-logs' to intake logs/traces data emitted by the Virtual Client. The following specifications should be used when creating\nthis Event Hub."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Message Retention: 2 days"),(0,r.kt)("li",{parentName:"ul"},"Partition Count: Production Scale = 32, Non-Production/Test Scale = 10"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"telemetry-metrics"),(0,r.kt)("br",{parentName:"p"}),"\n","Create an Event Hub named 'telemetry-metrics' to intake workload metrics/measurements data emitted by the Virtual Client. The following specifications should be used when creating\nthis Event Hub."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Message Retention: 2 days"),(0,r.kt)("li",{parentName:"ul"},"Partition Count: Production Scale = 32, Non-Production/Test Scale = 10"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"telemetry-monitors"),(0,r.kt)("br",{parentName:"p"}),"\n","Create an Event Hub named 'telemetry-monitors' to intake performance counter data emitted by the Virtual Client. The following specifications should be used when creating\nthis Event Hub."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Message Retention: 2 days"),(0,r.kt)("li",{parentName:"ul"},"Partition Count: Production Scale = 32, Non-Production/Test Scale = 10")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Event Hub Namespace Throughput Units",src:n(5949).Z,width:"1140",height:"500"}),"\n",(0,r.kt)("img",{alt:"Event Hub Namespace Throughput Units",src:n(5922).Z,width:"1136",height:"728"})))),(0,r.kt)("h3",{id:"integration-with-azure-data-explorerkusto"},"Integration with Azure Data Explorer/Kusto"),(0,r.kt)("p",null,'The following section describes how to setup an existing Azure Data Explorer (ADX) cluster to support ingesting Virtual Client data/telemetry\nfrom the set of Event Hubs describe above. Azure Data Explorer has out-of-box support for defining "data connectors" that will handle the ingestion\nof the data on a rapid cadence with little to no data loss. The data from Virtual Client will be ingested into tables within the ADX cluster in a 1-to-1\nmapping with the Event Hubs noted above.'),(0,r.kt)("h4",{id:"create-databases-and-tables"},"Create Databases and Tables"),(0,r.kt)("p",null,"The following steps describe the databases and tables required."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create a Database for Logs/Traces Data"),(0,r.kt)("br",{parentName:"p"}),"\n","Create a database to host tables that maintain logs/traces data. Data retention periods are defined at the database level in Azure Data Explorer.\nVirtual Client logs/traces data is useful for debugging necessities but not typically needed to be kept for very long periods of time (vs. performance and monitoring)\ndata. Set the data retention period to a value that makes sense for your process. For example, the VC team maintains logs/traces data for 30 days.\nYou can name the database whatever you like. The VC team uses the name 'WorkloadDiagnostics' for this database.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create the Tables for Logs/Traces Data"),(0,r.kt)("br",{parentName:"p"}),"\n","Data retention periods are defined at the database level in Azure Data Explorer. As such, a different database should be used to host this data\nversus the database used to host performance and monitoring data. Set the data retention period to a value that makes sense for your process.\nFor example, the VC team maintains logs/traces data for 30 days."),(0,r.kt)("p",{parentName:"li"},"Run the following Kusto Query Language (KQL) commands to create the tables required for ingesting Virtual Client data. "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-kusto"},"// Create the table for capturing traces/logs/errors\n.create table Traces (\n    Timestamp: datetime,\n    ExperimentId: string,\n    ClientId: string,\n    Profile: string,\n    ProfileName: string,\n    Message: string,\n    SeverityLevel: int,\n    ItemType: string,\n    ExecutionSystem: string,\n    OperatingSystemPlatform: string, \n    OperationId: string,\n    OperationParentId: string,\n    AppName: string,\n    AppHost: string,\n    AppVersion: string,\n    AppTelemetryVersion: string,\n    CustomDimensions: dynamic\n)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create a Database for Performance and Monitoring Data"),(0,r.kt)("br",{parentName:"p"}),"\n","Create a database to host tables that maintain performance and monitoring data. This data is useful for analyzing the performance of the system as well\nas resource usage and is typically desirable to keep for a longer period of time. Set the data retention period to a value that makes sense for your process. For example,\nthe VC team maintains performance and monitoring data for 10 years/3,650 days. You can name the database whatever you like. The VC team uses the name 'WorkloadPerformance'\nfor this database.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create the Tables for Performance and Monitoring Data"),(0,r.kt)("br",{parentName:"p"}),"\n","As noted above, it is typically desirable to maintain . Performance and monitoring data are useful over long periods of time\nto analyze historical trends. "),(0,r.kt)("p",{parentName:"li"},"Run the following Kusto Query Language (KQL) commands to create the tables required for ingesting Virtual Client data."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-kusto"},"// Create the table that will maintain important system events information.\n.create table Events (\n    Timestamp: datetime,\n    ExperimentId: string,\n    ClientId: string,\n    Profile: string,\n    ProfileName: string,\n    EventType: string,\n    EventInfo: dynamic,\n    SeverityLevel: int,\n    ItemType: string,\n    ExecutionSystem: string,\n    OperatingSystemPlatform: string,\n    OperationId: string,\n    OperationParentId: string,\n    AppName: string,\n    AppHost: string,\n    AppVersion: string,\n    AppTelemetryVersion: string,\n    Tags: string,\n    CustomDimensions: dynamic\n)\n\n// Create the table to maintain workload and system metrics/counters.\n.create table Metrics (\n    Timestamp: datetime,\n    ExperimentId: string,\n    ClientId: string,\n    Profile: string,\n    ProfileName: string,\n    ToolName: string,\n    ScenarioName: string,\n    ScenarioStartTime: datetime,\n    ScenarioEndTime: datetime,\n    MetricCategorization: string,\n    MetricName: string,\n    MetricValue: real,\n    MetricUnit: string,\n    ExecutionSystem: string,\n    OperatingSystemPlatform: string,\n    OperationId: string,\n    OperationParentId: string,\n    AppName: string,\n    AppHost: string,\n    AppVersion: string,\n    AppTelemetryVersion: string,\n    Tags: string,\n    CustomDimensions: dynamic\n)\n")))),(0,r.kt)("h4",{id:"create-custom-functions"},"Create Custom Functions"),(0,r.kt)("p",null,"The following functions are used to simplify data analysis, diagnostics and debugging of Virtual Client operations."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Functions for logs/traces database (e.g. WorkloadDiagnostics)"),"  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kusto"},".create-or-alter function GetVirtualClientErrors(startTime:datetime=datetime(null),endTime:datetime=datetime(null)) {\n    let dateRangeBegin = iff(isnull(startTime), ago(2d), startTime);\n    let dateRangeEnd = iff(isnull(endTime), now(), endTime);\n    Traces\n    | where Timestamp >= dateRangeBegin and Timestamp < dateRangeEnd and SeverityLevel > 1\n    | extend Error = tostring(CustomDimensions.error)\n    | extend ErrorCallstack = tostring(CustomDimensions.errorCallstack)\n    | project Timestamp, ExperimentId, ClientId, Profile, ProfileName, Message, SeverityLevel, Error, ErrorCallstack, OperationId, OperationParentId, AppName, AppHost, AppVersion, AppTelemetryVersion, CustomDimensions\n}\n")),(0,r.kt)("h4",{id:"create-the-json-ingestion-mappings"},"Create the JSON Ingestion Mappings"),(0,r.kt)("p",null,"JSON ingestion mappings define how to map the information in the structure of the events on the Event Hub with the table columns in the\nADX databases. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Create the Ingestion Mappings for the Logs/Traces Data"),(0,r.kt)("br",{parentName:"li"}),"Run the following Kusto Query Language (KQL) commands to create the JSON ingestion mappings required for ingesting Virtual Client logs/traces data.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kusto"},'// 1) Create the ingestion mappings for the \'Traces\' table\n.create table Traces ingestion json mapping \'IngestionMapping\' \'[{"column":"Timestamp","path":"$.timestamp","datatype":"","transform":null},{"column":"ExperimentId","path":"$.customDimensions.experimentId","datatype":"","transform":null},{"column":"ClientId","path":"$.customDimensions.metadata.agentId","datatype":"","transform":null},{"column":"Profile","path":"$.customDimensions.executionProfile","datatype":"","transform":null},{"column":"ProfileName","path":"$.customDimensions.executionProfileName","datatype":"","transform":null},{"column":"Message","path":"$.message","datatype":"","transform":null},{"column":"SeverityLevel","path":"$.severityLevel","datatype":"","transform":null},{"column":"ItemType","path":"$.itemType","datatype":"","transform":null},{"column":"ExecutionSystem","path":"$.customDimensions.executionSystem","datatype":"","transform":null},{"column":"OperatingSystemPlatform","path":"$.customDimensions.operatingSystemPlatform","datatype":"","transform":null},{"column":"OperationId","path":"$.operation_Id","datatype":"","transform":null},{"column":"OperationParentId","path":"$.operation_ParentId","datatype":"","transform":null},{"column":"AppName","path":"$.appName","datatype":"","transform":null},{"column":"AppHost","path":"$.appHost","datatype":"","transform":null},{"column":"AppVersion","path":"$.customDimensions.appVersion","datatype":"","transform":null},{"column":"AppTelemetryVersion","path":"$.sdkVersion","datatype":"","transform":null},{"column":"CustomDimensions","path":"$.customDimensions","datatype":"","transform":null}]\'\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Create the Ingestion Mappings for the Performance and Monitoring Data"),(0,r.kt)("br",{parentName:"li"}),"Run the following Kusto Query Language (KQL) commands to create the JSON ingestion mappings required for ingesting Virtual Client performance and monitoring data.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kusto"},'// 1) Create the ingestion mappings for the \'Events\' table\n.create table Events ingestion json mapping \'IngestionMapping\' \'[{"column":"Timestamp","path":"$.timestamp","datatype":"","transform":null},{"column":"ExperimentId","path":"$.customDimensions.experimentId","datatype":"","transform":null},{"column":"ClientId","path":"$.customDimensions.metadata.agentId","datatype":"","transform":null},{"column":"Profile","path":"$.customDimensions.executionProfile","datatype":"","transform":null},{"column":"ProfileName","path":"$.customDimensions.executionProfileName","datatype":"","transform":null},{"column":"EventType","path":"$.customDimensions.eventType","datatype":"","transform":null},{"column":"EventInfo","path":"$.customDimensions.eventInfo","datatype":"","transform":null},{"column":"SeverityLevel","path":"$.severityLevel","datatype":"","transform":null},{"column":"ItemType","path":"$.itemType","datatype":"","transform":null},{"column":"ExecutionSystem","path":"$.customDimensions.executionSystem","datatype":"","transform":null},{"column":"OperatingSystemPlatform","path":"$.customDimensions.operatingSystemPlatform","datatype":"","transform":null},{"column":"OperationId","path":"$.operation_Id","datatype":"","transform":null},{"column":"OperationParentId","path":"$.operation_ParentId","datatype":"","transform":null},{"column":"AppName","path":"$.appName","datatype":"","transform":null},{"column":"AppHost","path":"$.appHost","datatype":"","transform":null},{"column":"AppVersion","path":"$.customDimensions.appVersion","datatype":"","transform":null},{"column":"AppTelemetryVersion","path":"$.sdkVersion","datatype":"","transform":null},{"column":"Tags","path":"$.customDimensions.tags","datatype":"","transform":null},{"column":"CustomDimensions","path":"$.customDimensions","datatype":"","transform":null}]\'\n\n// 2) Create the ingestion mappings for the \'Metrics\' table\n.create table Metrics ingestion json mapping \'IngestionMapping\' \'[{"column":"Timestamp","path":"$.timestamp","datatype":"","transform":null},{"column":"ExperimentId","path":"$.customDimensions.experimentId","datatype":"","transform":null},{"column":"ClientId","path":"$.customDimensions.metadata.agentId","datatype":"","transform":null},{"column":"Profile","path":"$.customDimensions.executionProfile","datatype":"","transform":null},{"column":"ProfileName","path":"$.customDimensions.executionProfileName","datatype":"","transform":null},{"column":"ToolName","path":"$.customDimensions.toolName","datatype":"","transform":null},{"column":"ScenarioName","path":"$.customDimensions.scenarioName","datatype":"","transform":null},{"column":"ScenarioStartTime","path":"$.customDimensions.scenarioStartTime","datatype":"","transform":null},{"column":"ScenarioEndTime","path":"$.customDimensions.scenarioEndTime","datatype":"","transform":null},{"column":"MetricCategorization","path":"$.customDimensions.metricCategorization","datatype":"","transform":null},{"column":"MetricName","path":"$.customDimensions.metricName","datatype":"","transform":null},{"column":"MetricValue","path":"$.customDimensions.metricValue","datatype":"","transform":null},{"column":"MetricUnit","path":"$.customDimensions.metricUnit","datatype":"","transform":null},{"column":"ExecutionSystem","path":"$.customDimensions.executionSystem","datatype":"","transform":null},{"column":"OperatingSystemPlatform","path":"$.customDimensions.operatingSystemPlatform","datatype":"","transform":null},{"column":"OperationId","path":"$.operation_Id","datatype":"","transform":null},{"column":"OperationParentId","path":"$.operation_ParentId","datatype":"","transform":null},{"column":"AppName","path":"$.appName","datatype":"","transform":null},{"column":"AppHost","path":"$.appHost","datatype":"","transform":null},{"column":"AppVersion","path":"$.customDimensions.appVersion","datatype":"","transform":null},{"column":"AppTelemetryVersion","path":"$.sdkVersion","datatype":"","transform":null},{"column":"Tags","path":"$.customDimensions.tags","datatype":"","transform":null},{"column":"CustomDimensions","path":"$.customDimensions","datatype":"","transform":null}]\'\n')),(0,r.kt)("h4",{id:"create-data-connectors"},"Create Data Connectors"),(0,r.kt)("p",null,"The following steps describe the data connectors required to ingest data from the Event Hubs into the ADX tables."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create Event Hub Consumer Group"),(0,r.kt)("br",{parentName:"p"}),"\n","On each of the Event Hubs created/noted above (e.g. telemetry-logs, telemetry-metrics) in the Event Hub namespace, create a consumer group named\n'adx-ingestion'. This consumer group will be used by the ADX data connector exclusively to ingest data from the Event Hub\ninto the ADX cluster database tables.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create Data Connector for Events Data"),(0,r.kt)("br",{parentName:"p"}),"\n","This data connector ingests data from the 'telemetry-events' Event Hub into the VirtualClientEvents table. Use the following\nsettings during the creation of the data connector after you have selected the appropriate Event Hub information:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Event Hub = telemetry-events"),(0,r.kt)("li",{parentName:"ul"},"Consumer group = adx-ingestion"),(0,r.kt)("li",{parentName:"ul"},"Event system properties = 0/none"),(0,r.kt)("li",{parentName:"ul"},"Compression = None"),(0,r.kt)("li",{parentName:"ul"},"Assign managed identity = None"),(0,r.kt)("li",{parentName:"ul"},"Table Name = Events (or whatever name was used above when creating the table)"),(0,r.kt)("li",{parentName:"ul"},"Data format = MULTILINE JSON"),(0,r.kt)("li",{parentName:"ul"},"Mapping name = IngestionMapping (or whatever name was used above when creating the ingestion JSON mapping)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create Data Connector for Logs/Traces Data"),(0,r.kt)("br",{parentName:"p"}),"\n","This data connector ingests data from the 'telemetry-logs' Event Hub into the VirtualClientLogs table. Use the following\nsettings during the creation of the data connector after you have selected the appropriate Event Hub information:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Event Hub = telemetry-logs"),(0,r.kt)("li",{parentName:"ul"},"Consumer group = adx-ingestion"),(0,r.kt)("li",{parentName:"ul"},"Event system properties = 0/none"),(0,r.kt)("li",{parentName:"ul"},"Compression = None"),(0,r.kt)("li",{parentName:"ul"},"Assign managed identity = None"),(0,r.kt)("li",{parentName:"ul"},"Table Name = Traces (or whatever name was used above when creating the table)"),(0,r.kt)("li",{parentName:"ul"},"Data format = MULTILINE JSON"),(0,r.kt)("li",{parentName:"ul"},"Mapping name = IngestionMapping (or whatever name was used above when creating the ingestion JSON mapping)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create Data Connector for Metrics Data"),(0,r.kt)("br",{parentName:"p"}),"\n","This data connector ingests data from the 'telemetry-metrics' Event Hub into the VirtualClientMetrics table. Use the following\nsettings during the creation of the data connector after you have selected the appropriate Event Hub information:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Event Hub = telemetry-metrics"),(0,r.kt)("li",{parentName:"ul"},"Consumer group = adx-ingestion"),(0,r.kt)("li",{parentName:"ul"},"Event system properties = 0/none"),(0,r.kt)("li",{parentName:"ul"},"Compression = None"),(0,r.kt)("li",{parentName:"ul"},"Assign managed identity = None"),(0,r.kt)("li",{parentName:"ul"},"Table Name = Metrics (or whatever name was used above when creating the table)"),(0,r.kt)("li",{parentName:"ul"},"Data format = MULTILINE JSON"),(0,r.kt)("li",{parentName:"ul"},"Mapping name = IngestionMapping (or whatever name was used above when creating the ingestion JSON mapping)")))),(0,r.kt)("h4",{id:"configure-adx-cluster-ingestion-settings"},"Configure ADX Cluster Ingestion Settings"),(0,r.kt)("p",null,"The following steps configure the Azure Data Explorer (ADX) cluster data ingestion settings."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Configure the Ingestion Cadence"),(0,r.kt)("br",{parentName:"p"}),"\n","Run the following command against the ADX cluster to configure how often the data ingestion jobs will run. ADX/Kusto can ingest\ndata in near-realtime intervals."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/management/batchingpolicy"},"https://docs.microsoft.com/en-us/azure/data-explorer/kusto/management/batchingpolicy")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-kusto"},"// Update the ingestion batching policies on each of the databases. This updates the cadence for ingesting data \n// to be every 1 minute.\n.alter database {DatabaseName} policy ingestionbatching @\"{ 'MaximumBatchingTimeSpan': '00:01:00', 'MaximumNumberOfItems': 500, 'MaximumRawDataSizeMB': 1024 }\"\n\n// View the ingestion batching policy\n.show database {DatabaseName} policy ingestionbatching\n")))))}u.isMDXComponent=!0},5949:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/eventhub-integration-1-71bfdd9bf8129bf173dc4e260c59a66e.png"},5922:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/eventhub-integration-2-612eb5fdb6b3c969802d581660c787b2.png"}}]);